# Spring Boot 프로젝트 Cursor Rules

## 프로젝트 구조 및 설정
- Spring Boot 프로젝트는 표준 Maven/Gradle 디렉토리 구조를 따릅니다
- `src/main/java`: 메인 Java 소스 코드
- `src/main/resources`: 설정 파일, 정적 리소스
- `src/main/webapp`: 웹 리소스 (JSP 등)
- `src/test/java`: 테스트 코드
- `pom.xml` (Maven) 또는 `build.gradle` (Gradle) 파일이 프로젝트 루트에 있어야 합니다

## 빌드 및 실행 명령어

### Maven 기반 프로젝트
```bash
# 프로젝트 컴파일
mvn compile

# 테스트 실행
mvn test

# 패키지 생성 (JAR/WAR)
mvn package

# Spring Boot 애플리케이션 실행
mvn spring-boot:run

# 의존성 다운로드
mvn dependency:resolve

# 클린 빌드
mvn clean install

# Maven Wrapper 사용 (권장)
./mvnw spring-boot:run
./mvnw clean install
```

### Gradle 기반 프로젝트
```bash
# 프로젝트 빌드
./gradlew build

# 테스트 실행
./gradlew test

# Spring Boot 애플리케이션 실행
./gradlew bootRun

# 의존성 확인
./gradlew dependencies

# 클린 빌드
./gradlew clean build

# Gradle Wrapper 사용 (권장)
./gradlew bootRun
./gradlew clean build
```

## 개발 환경 설정

### Java 버전
- Spring Boot 2.7.x: Java 8-17 지원
- Spring Boot 3.x: Java 17+ 필요
- `JAVA_HOME` 환경변수가 올바르게 설정되어야 합니다

### IDE 설정
- IntelliJ IDEA, Eclipse, VS Code 등 지원
- Spring Boot DevTools 의존성 추가 권장 (자동 재시작)
- JSP 사용 시 `tomcat-embed-jasper` 의존성 필요

## 일반적인 문제 해결

### Maven 관련
- `JAVA_HOME` 환경변수 확인
- Maven Wrapper 사용 권장 (`mvnw` 또는 `mvnw.cmd`)
- `.m2/repository` 캐시 삭제 후 재시도

### Gradle 관련
- Gradle Wrapper 사용 권장 (`gradlew` 또는 `gradlew.bat`)
- `GRADLE_HOME` 환경변수 설정 (선택사항)
- `.gradle` 캐시 삭제 후 재시도

### Spring Boot 관련
- 포트 충돌 시 `application.properties`에서 `server.port` 변경
- 로그 레벨 조정: `logging.level.root=INFO`
- 프로파일 설정: `spring.profiles.active=dev`

## 프로젝트 실행 확인
- 애플리케이션 시작 후 로그에서 "Started Application" 메시지 확인
- 기본적으로 `http://localhost:8080` (또는 설정된 포트)에서 접근
- Actuator 엔드포인트: `http://localhost:8080/actuator/health`

## 개발 팁
- `spring-boot-devtools` 의존성으로 자동 재시작 활성화
- `@SpringBootTest` 어노테이션으로 통합 테스트 작성
- `application-dev.properties` 등 환경별 설정 파일 활용
- 로깅 설정으로 개발 시 디버깅 정보 확인

## 의존성 관리
- Spring Boot Starter 의존성 사용 권장
- 버전 충돌 시 `spring-boot-dependencies` BOM 활용
- Maven: `<dependencyManagement>` 섹션 활용
- Gradle: `dependencyManagement` 플러그인 사용

## API 호출 규칙

### 기본 서버 설정
- **기본 API 서버 URL**: `http://localhost:8080`
- 모든 외부 API 호출은 이 URL을 기본으로 사용
- `application.properties`에서 `remote.example.api.url=http://localhost:8080` 설정 유지

### JavaScript AJAX 호출 규칙
- **모든 API 호출은 JavaScript에서 AJAX를 통해서만 수행**
- 서버 사이드에서 직접 API 호출 금지 (RestTemplate 사용 금지)
- Fetch API 또는 XMLHttpRequest 사용 권장

#### AJAX 호출 표준 패턴
```javascript
// 기본 AJAX 호출 패턴
async function callExternalAPI(endpoint, method = 'GET', data = null) {
    const baseUrl = 'http://localhost:8080';
    const url = baseUrl + endpoint;
    
    try {
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json'
            }
        };
        
        if (data && method !== 'GET') {
            options.body = JSON.stringify(data);
        }
        
        const response = await fetch(url, options);
        
        if (!response.ok) {
            throw new Error(`API 호출 실패: ${response.status}`);
        }
        
        return await response.json();
    } catch (error) {
        console.error('API 호출 오류:', error);
        throw error;
    }
}

// 사용 예시
const menuData = await callExternalAPI('/api/hierarchical-menu');
```

#### 에러 처리 규칙
- 모든 AJAX 호출은 try-catch로 감싸기
- 네트워크 오류 시 사용자 친화적 메시지 표시
- Fallback 데이터 또는 기본 동작 제공

#### JSP에서의 AJAX 구현
- JSP 파일 내 `<script>` 태그에서 AJAX 함수 구현
- 페이지 로드 시 `DOMContentLoaded` 이벤트에서 API 호출
- 동적 메뉴/데이터 업데이트는 JavaScript로만 처리

### 금지 사항
- 서버 사이드에서 RestTemplate을 통한 직접 API 호출
- 동기적 API 호출 (async/await 사용 필수)
- CORS 문제 발생 시 프록시 설정 고려

## JSP 화면 레이아웃 구성 규칙

### 기본 원칙
- **요구사항에 명시된 기능만 구현**
- **나머지 영역은 공백 또는 플레이스홀더로 표현**
- **과도한 UI 구성이나 불필요한 컴포넌트 추가 금지**

### 레이아웃 구성 가이드라인

#### 공통 구조
```jsp
<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>페이지 제목</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <!-- 필요한 외부 라이브러리만 포함 -->
</head>
<body>
    <!-- 공통 네비게이션 바 포함 -->
    <jsp:include page="common/navbar.jsp" />
    
    <!-- 요구사항에 따른 메인 콘텐츠만 구현 -->
    <div class="main-content">
        <!-- 실제 구현이 필요한 영역만 작성 -->
        <!-- 나머지는 공백 또는 간단한 플레이스홀더 -->
    </div>
</body>
</html>
```

#### 구현 범위 제한
1. **요청된 기능만 구현**
   - 명시적으로 요구된 UI 구성 요소만 작성
   - 추가적인 장식이나 부가 기능 금지

2. **공백 영역 처리**
   - 구현되지 않은 영역은 의미 있는 플레이스홀더 표시
   - 예: "이 영역은 향후 구현 예정입니다", "콘텐츠가 여기에 표시됩니다"

3. **CSS 스타일링 최소화**
   - 기본적인 레이아웃과 요구된 기능에 필요한 스타일만 적용
   - 장식적인 스타일링 최소화

#### 플레이스홀더 표준 형식
```html
<!-- 비어있는 영역 -->
<div class="placeholder-area">
    <i class="fas fa-cube" style="font-size: 48px; color: #ddd; margin-bottom: 15px;"></i>
    <p style="color: #999; text-align: center;">
        이 영역은 추후 구현 예정입니다
    </p>
</div>

<!-- 기능별 플레이스홀더 -->
<div class="content-placeholder">
    <i class="fas fa-[적절한아이콘]" style="margin-right: 10px; color: #667eea;"></i>
    [기능명] 영역
</div>
```

#### 레이아웃 비율 준수
- 요구사항에서 명시한 비율 정확히 준수 (예: 좌측 20%, 우측 80%)
- 비율이 명시되지 않은 경우 균등 분할 또는 합리적인 기본값 사용

#### JavaScript 구현 제한
- 요구된 기능의 JavaScript만 구현
- 불필요한 애니메이션이나 인터랙션 효과 금지
- API 호출 관련 코드는 명시된 엔드포인트만 구현

#### 반응형 디자인 기본 적용
```css
/* 기본 반응형만 적용 */
@media (max-width: 768px) {
    .main-content {
        padding: 15px;
    }
    
    /* 필수 모바일 최적화만 적용 */
}
```

### 예시: 요구사항별 구현 범위

#### "좌측 20%에 트리, 우측 80%에 차트" 요구사항
```jsp
<div class="container" style="display: flex; height: calc(100vh - 70px);">
    <!-- 좌측 20% - 트리 구현 -->
    <div class="left-panel" style="width: 20%; border-right: 1px solid #ddd;">
        <!-- 요구된 트리 컴포넌트만 구현 -->
        <div id="treeComponent"></div>
    </div>
    
    <!-- 우측 80% - 차트 영역 -->
    <div class="right-panel" style="width: 80%; padding: 20px;">
        <!-- 요구된 차트만 구현, 나머지는 플레이스홀더 -->
        <div class="chart-area">
            <div class="content-placeholder">
                <i class="fas fa-chart-bar" style="margin-right: 10px; color: #667eea;"></i>
                차트가 여기에 표시됩니다
            </div>
        </div>
    </div>
</div>
```

### 주의사항
- **과도한 디자인 금지**: 요구사항에 없는 화려한 UI 구성 금지
- **기능 추가 금지**: 명시되지 않은 부가 기능 구현 금지
- **일관성 유지**: 기존 프로젝트의 스타일 가이드와 일관성 유지
- **성능 고려**: 불필요한 라이브러리나 리소스 로드 금지